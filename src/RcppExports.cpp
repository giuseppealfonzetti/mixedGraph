// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// eta_categorical_node
const double eta_categorical_node(const Eigen::VectorXd& data, const Eigen::MatrixXd& edgesPar, const unsigned int r, const unsigned int p, const unsigned int cat, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_eta_categorical_node(SEXP dataSEXP, SEXP edgesParSEXP, SEXP rSEXP, SEXP pSEXP, SEXP catSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type cat(catSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(eta_categorical_node(data, edgesPar, r, p, cat, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// logp_categorical_node
const double logp_categorical_node(const Eigen::VectorXd& data, const Eigen::MatrixXd& edgesPar, const unsigned int r, const unsigned int p, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_logp_categorical_node(SEXP dataSEXP, SEXP edgesParSEXP, SEXP rSEXP, SEXP pSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(logp_categorical_node(data, edgesPar, r, p, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// gradient_categorical_node
Eigen::VectorXd gradient_categorical_node(const Eigen::VectorXd& data, const Eigen::MatrixXd& edgesPar, const unsigned int r, const unsigned int p, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const double prob, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_gradient_categorical_node(SEXP dataSEXP, SEXP edgesParSEXP, SEXP rSEXP, SEXP pSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP probSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_categorical_node(data, edgesPar, r, p, nodes_type, cumsum_nodes_type, prob, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// gradientV2_categorical_node
Eigen::VectorXd gradientV2_categorical_node(const Eigen::VectorXd& data, const Eigen::MatrixXd& edgesPar, std::vector<double>& probs, const unsigned int r, const unsigned int p, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_gradientV2_categorical_node(SEXP dataSEXP, SEXP edgesParSEXP, SEXP probsSEXP, SEXP rSEXP, SEXP pSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< std::vector<double>& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(gradientV2_categorical_node(data, edgesPar, probs, r, p, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// dHess_categorical_node
Eigen::VectorXd dHess_categorical_node(const Eigen::VectorXd& data, const Eigen::MatrixXd& edgesPar, const std::vector<double>& probs, const unsigned int r, const unsigned int p, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_dHess_categorical_node(SEXP dataSEXP, SEXP edgesParSEXP, SEXP probsSEXP, SEXP rSEXP, SEXP pSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type probs(probsSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(dHess_categorical_node(data, edgesPar, probs, r, p, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// E_continuous_node
const double E_continuous_node(const Eigen::VectorXd& data, const Eigen::MatrixXd& edgesPar, const Eigen::VectorXd& nodesPar, const unsigned int s, const unsigned int p, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_E_continuous_node(SEXP dataSEXP, SEXP edgesParSEXP, SEXP nodesParSEXP, SEXP sSEXP, SEXP pSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type nodesPar(nodesParSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(E_continuous_node(data, edgesPar, nodesPar, s, p, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// logp_continuous_node
const double logp_continuous_node(const double& E, const double& betass, const double& xi);
RcppExport SEXP _mixedGraph_logp_continuous_node(SEXP ESEXP, SEXP betassSEXP, SEXP xiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double& >::type betass(betassSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi(xiSEXP);
    rcpp_result_gen = Rcpp::wrap(logp_continuous_node(E, betass, xi));
    return rcpp_result_gen;
END_RCPP
}
// gradient_continuous_node
Eigen::VectorXd gradient_continuous_node(const double& E, const double& betass, const double& xi, const unsigned int p, const unsigned int s, const unsigned int dim_edgesPar, const Eigen::VectorXd& data, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_gradient_continuous_node(SEXP ESEXP, SEXP betassSEXP, SEXP xiSEXP, SEXP pSEXP, SEXP sSEXP, SEXP dim_edgesParSEXP, SEXP dataSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double& >::type betass(betassSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type dim_edgesPar(dim_edgesParSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(gradient_continuous_node(E, betass, xi, p, s, dim_edgesPar, data, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// dHess_continuous_node
Eigen::VectorXd dHess_continuous_node(const double& E, const double& betass, const double& xi, const unsigned int p, const unsigned int s, const unsigned int dim_edgesPar, const Eigen::VectorXd& data, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_dHess_continuous_node(SEXP ESEXP, SEXP betassSEXP, SEXP xiSEXP, SEXP pSEXP, SEXP sSEXP, SEXP dim_edgesParSEXP, SEXP dataSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double& >::type E(ESEXP);
    Rcpp::traits::input_parameter< const double& >::type betass(betassSEXP);
    Rcpp::traits::input_parameter< const double& >::type xi(xiSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type s(sSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type dim_edgesPar(dim_edgesParSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(dHess_continuous_node(E, betass, xi, p, s, dim_edgesPar, data, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// graph_cl
Rcpp::List graph_cl(const Eigen::MatrixXd& DATA, const Eigen::VectorXd& THETA, const std::vector<unsigned int> NODES_TYPE, const bool VERBOSEFLAG, const bool GRADFLAG, const bool GRAD2FLAG);
RcppExport SEXP _mixedGraph_graph_cl(SEXP DATASEXP, SEXP THETASEXP, SEXP NODES_TYPESEXP, SEXP VERBOSEFLAGSEXP, SEXP GRADFLAGSEXP, SEXP GRAD2FLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type NODES_TYPE(NODES_TYPESEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSEFLAG(VERBOSEFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type GRADFLAG(GRADFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type GRAD2FLAG(GRAD2FLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(graph_cl(DATA, THETA, NODES_TYPE, VERBOSEFLAG, GRADFLAG, GRAD2FLAG));
    return rcpp_result_gen;
END_RCPP
}
// mixedGraph_old
Rcpp::List mixedGraph_old(const Eigen::MatrixXd& DATA, const std::vector<double>& SDS, const Eigen::VectorXd& THETA, const std::vector<unsigned int> NODES_TYPE, const unsigned int MAXITER, double STEPSIZE, const double REG_PAR, const double NU, const double TOL, const unsigned int TOL_MINCOUNT, const bool DHESSFLAG, const bool VERBOSEFLAG, const bool REGFLAG, const unsigned int BURN, const unsigned int SAMPLING_SCHEME, const unsigned int BATCH, const unsigned int SEED);
RcppExport SEXP _mixedGraph_mixedGraph_old(SEXP DATASEXP, SEXP SDSSEXP, SEXP THETASEXP, SEXP NODES_TYPESEXP, SEXP MAXITERSEXP, SEXP STEPSIZESEXP, SEXP REG_PARSEXP, SEXP NUSEXP, SEXP TOLSEXP, SEXP TOL_MINCOUNTSEXP, SEXP DHESSFLAGSEXP, SEXP VERBOSEFLAGSEXP, SEXP REGFLAGSEXP, SEXP BURNSEXP, SEXP SAMPLING_SCHEMESEXP, SEXP BATCHSEXP, SEXP SEEDSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type SDS(SDSSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type NODES_TYPE(NODES_TYPESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type MAXITER(MAXITERSEXP);
    Rcpp::traits::input_parameter< double >::type STEPSIZE(STEPSIZESEXP);
    Rcpp::traits::input_parameter< const double >::type REG_PAR(REG_PARSEXP);
    Rcpp::traits::input_parameter< const double >::type NU(NUSEXP);
    Rcpp::traits::input_parameter< const double >::type TOL(TOLSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type TOL_MINCOUNT(TOL_MINCOUNTSEXP);
    Rcpp::traits::input_parameter< const bool >::type DHESSFLAG(DHESSFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSEFLAG(VERBOSEFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type REGFLAG(REGFLAGSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type SAMPLING_SCHEME(SAMPLING_SCHEMESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type BATCH(BATCHSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type SEED(SEEDSEXP);
    rcpp_result_gen = Rcpp::wrap(mixedGraph_old(DATA, SDS, THETA, NODES_TYPE, MAXITER, STEPSIZE, REG_PAR, NU, TOL, TOL_MINCOUNT, DHESSFLAG, VERBOSEFLAG, REGFLAG, BURN, SAMPLING_SCHEME, BATCH, SEED));
    return rcpp_result_gen;
END_RCPP
}
// mixedGraph
Rcpp::List mixedGraph(const Eigen::MatrixXd& DATA, const std::vector<double>& SDS, const Eigen::VectorXd& THETA, const std::vector<unsigned int> NODES_TYPE, const unsigned int MAXITER, double STEPSIZE, const double REG_PAR, const double NU, const double TOL, const unsigned int TOL_MINCOUNT, const bool VERBOSEFLAG, const bool REGFLAG, const unsigned int BURN, const unsigned int SAMPLING_SCHEME, const unsigned int SEED, const double EPS);
RcppExport SEXP _mixedGraph_mixedGraph(SEXP DATASEXP, SEXP SDSSEXP, SEXP THETASEXP, SEXP NODES_TYPESEXP, SEXP MAXITERSEXP, SEXP STEPSIZESEXP, SEXP REG_PARSEXP, SEXP NUSEXP, SEXP TOLSEXP, SEXP TOL_MINCOUNTSEXP, SEXP VERBOSEFLAGSEXP, SEXP REGFLAGSEXP, SEXP BURNSEXP, SEXP SAMPLING_SCHEMESEXP, SEXP SEEDSEXP, SEXP EPSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type SDS(SDSSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type NODES_TYPE(NODES_TYPESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type MAXITER(MAXITERSEXP);
    Rcpp::traits::input_parameter< double >::type STEPSIZE(STEPSIZESEXP);
    Rcpp::traits::input_parameter< const double >::type REG_PAR(REG_PARSEXP);
    Rcpp::traits::input_parameter< const double >::type NU(NUSEXP);
    Rcpp::traits::input_parameter< const double >::type TOL(TOLSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type TOL_MINCOUNT(TOL_MINCOUNTSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSEFLAG(VERBOSEFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type REGFLAG(REGFLAGSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type SAMPLING_SCHEME(SAMPLING_SCHEMESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type SEED(SEEDSEXP);
    Rcpp::traits::input_parameter< const double >::type EPS(EPSSEXP);
    rcpp_result_gen = Rcpp::wrap(mixedGraph(DATA, SDS, THETA, NODES_TYPE, MAXITER, STEPSIZE, REG_PAR, NU, TOL, TOL_MINCOUNT, VERBOSEFLAG, REGFLAG, BURN, SAMPLING_SCHEME, SEED, EPS));
    return rcpp_result_gen;
END_RCPP
}
// mixedGraph_SVRG
Rcpp::List mixedGraph_SVRG(const Eigen::MatrixXd& DATA, const std::vector<double>& SDS, const Eigen::VectorXd& THETA, const std::vector<unsigned int> NODES_TYPE, const unsigned int MAXITER, double STEPSIZE, const double REG_PAR, const unsigned int M, const double NU, const double TOL, const unsigned int TOL_MINCOUNT, const bool VERBOSEFLAG, const bool REGFLAG, const unsigned int BURN, const unsigned int SAMPLING_SCHEME, const unsigned int SEED, const double EPS);
RcppExport SEXP _mixedGraph_mixedGraph_SVRG(SEXP DATASEXP, SEXP SDSSEXP, SEXP THETASEXP, SEXP NODES_TYPESEXP, SEXP MAXITERSEXP, SEXP STEPSIZESEXP, SEXP REG_PARSEXP, SEXP MSEXP, SEXP NUSEXP, SEXP TOLSEXP, SEXP TOL_MINCOUNTSEXP, SEXP VERBOSEFLAGSEXP, SEXP REGFLAGSEXP, SEXP BURNSEXP, SEXP SAMPLING_SCHEMESEXP, SEXP SEEDSEXP, SEXP EPSSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type DATA(DATASEXP);
    Rcpp::traits::input_parameter< const std::vector<double>& >::type SDS(SDSSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type NODES_TYPE(NODES_TYPESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type MAXITER(MAXITERSEXP);
    Rcpp::traits::input_parameter< double >::type STEPSIZE(STEPSIZESEXP);
    Rcpp::traits::input_parameter< const double >::type REG_PAR(REG_PARSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type M(MSEXP);
    Rcpp::traits::input_parameter< const double >::type NU(NUSEXP);
    Rcpp::traits::input_parameter< const double >::type TOL(TOLSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type TOL_MINCOUNT(TOL_MINCOUNTSEXP);
    Rcpp::traits::input_parameter< const bool >::type VERBOSEFLAG(VERBOSEFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type REGFLAG(REGFLAGSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type BURN(BURNSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type SAMPLING_SCHEME(SAMPLING_SCHEMESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type SEED(SEEDSEXP);
    Rcpp::traits::input_parameter< const double >::type EPS(EPSSEXP);
    rcpp_result_gen = Rcpp::wrap(mixedGraph_SVRG(DATA, SDS, THETA, NODES_TYPE, MAXITER, STEPSIZE, REG_PAR, M, NU, TOL, TOL_MINCOUNT, VERBOSEFLAG, REGFLAG, BURN, SAMPLING_SCHEME, SEED, EPS));
    return rcpp_result_gen;
END_RCPP
}
// proximal_stepR
Rcpp::List proximal_stepR(const Eigen::VectorXd& theta, const Eigen::VectorXd& Dvec, const std::vector<unsigned int> nodes_type, const std::vector<unsigned int> cumsum_nodes_type, const unsigned int p, const unsigned int r, const unsigned int n_nodes, const double lambda, const double gamma, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_proximal_stepR(SEXP thetaSEXP, SEXP DvecSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP pSEXP, SEXP rSEXP, SEXP n_nodesSEXP, SEXP lambdaSEXP, SEXP gammaSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type Dvec(DvecSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_nodes(n_nodesSEXP);
    Rcpp::traits::input_parameter< const double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< const double >::type gamma(gammaSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(proximal_stepR(theta, Dvec, nodes_type, cumsum_nodes_type, p, r, n_nodes, lambda, gamma, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// intMultinom
const unsigned int intMultinom(Eigen::VectorXd E_probs, bool verboseFLAG, const double tol);
RcppExport SEXP _mixedGraph_intMultinom(SEXP E_probsSEXP, SEXP verboseFLAGSEXP, SEXP tolSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type E_probs(E_probsSEXP);
    Rcpp::traits::input_parameter< bool >::type verboseFLAG(verboseFLAGSEXP);
    Rcpp::traits::input_parameter< const double >::type tol(tolSEXP);
    rcpp_result_gen = Rcpp::wrap(intMultinom(E_probs, verboseFLAG, tol));
    return rcpp_result_gen;
END_RCPP
}
// drawCatNode
const unsigned int drawCatNode(const Eigen::VectorXd& data, const Eigen::MatrixXd& edgesPar, const unsigned int& node, const unsigned int& p, const std::vector<unsigned int>& nodes_type, const std::vector<unsigned int>& cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_drawCatNode(SEXP dataSEXP, SEXP edgesParSEXP, SEXP nodeSEXP, SEXP pSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(drawCatNode(data, edgesPar, node, p, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// drawContNode
const double drawContNode(const Eigen::VectorXd& data, const Eigen::MatrixXd& edgesPar, const Eigen::VectorXd& nodesPar, const unsigned int& node, const unsigned int& p, const std::vector<unsigned int>& nodes_type, const std::vector<unsigned int>& cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_drawContNode(SEXP dataSEXP, SEXP edgesParSEXP, SEXP nodesParSEXP, SEXP nodeSEXP, SEXP pSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type nodesPar(nodesParSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type node(nodeSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(drawContNode(data, edgesPar, nodesPar, node, p, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// graphGibbsSampler
Rcpp::List graphGibbsSampler(const Eigen::MatrixXd& edgesPar, const Eigen::VectorXd& nodesPar, const std::vector<unsigned int> nodes_type, const unsigned int warmup, unsigned int maxiter, const unsigned int m, const unsigned int skip, const bool verboseFLAG, const bool store_warmupFLAG);
RcppExport SEXP _mixedGraph_graphGibbsSampler(SEXP edgesParSEXP, SEXP nodesParSEXP, SEXP nodes_typeSEXP, SEXP warmupSEXP, SEXP maxiterSEXP, SEXP mSEXP, SEXP skipSEXP, SEXP verboseFLAGSEXP, SEXP store_warmupFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type nodesPar(nodesParSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type store_warmupFLAG(store_warmupFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(graphGibbsSampler(edgesPar, nodesPar, nodes_type, warmup, maxiter, m, skip, verboseFLAG, store_warmupFLAG));
    return rcpp_result_gen;
END_RCPP
}
// cont_gamma
Eigen::VectorXd cont_gamma(const Eigen::MatrixXd& edgesPar, const Eigen::VectorXd& nodesPar, const Eigen::VectorXd& cat_pattern, const unsigned int& p, const std::vector<unsigned int>& nodes_type, const std::vector<unsigned int>& cumsum_nodes_type, const bool verboseFLAG);
RcppExport SEXP _mixedGraph_cont_gamma(SEXP edgesParSEXP, SEXP nodesParSEXP, SEXP cat_patternSEXP, SEXP pSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP verboseFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type nodesPar(nodesParSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type cat_pattern(cat_patternSEXP);
    Rcpp::traits::input_parameter< const unsigned int& >::type p(pSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(cont_gamma(edgesPar, nodesPar, cat_pattern, p, nodes_type, cumsum_nodes_type, verboseFLAG));
    return rcpp_result_gen;
END_RCPP
}
// graphBlocksGibbsSampler
Rcpp::List graphBlocksGibbsSampler(const Eigen::MatrixXd& edgesPar, const Eigen::VectorXd& nodesPar, const std::vector<unsigned int> nodes_type, const unsigned int warmup, unsigned int maxiter, const unsigned int m, const unsigned int skip, const bool verboseFLAG, const bool store_warmupFLAG);
RcppExport SEXP _mixedGraph_graphBlocksGibbsSampler(SEXP edgesParSEXP, SEXP nodesParSEXP, SEXP nodes_typeSEXP, SEXP warmupSEXP, SEXP maxiterSEXP, SEXP mSEXP, SEXP skipSEXP, SEXP verboseFLAGSEXP, SEXP store_warmupFLAGSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd& >::type edgesPar(edgesParSEXP);
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type nodesPar(nodesParSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type warmup(warmupSEXP);
    Rcpp::traits::input_parameter< unsigned int >::type maxiter(maxiterSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type skip(skipSEXP);
    Rcpp::traits::input_parameter< const bool >::type verboseFLAG(verboseFLAGSEXP);
    Rcpp::traits::input_parameter< const bool >::type store_warmupFLAG(store_warmupFLAGSEXP);
    rcpp_result_gen = Rcpp::wrap(graphBlocksGibbsSampler(edgesPar, nodesPar, nodes_type, warmup, maxiter, m, skip, verboseFLAG, store_warmupFLAG));
    return rcpp_result_gen;
END_RCPP
}
// theta_to_edgesPar
const Eigen::MatrixXd theta_to_edgesPar(const Eigen::VectorXd& THETA, const std::vector<unsigned int>& NODES_TYPE, const std::vector<unsigned int>& CUMSUM_NODES_TYPE, const unsigned int P, const unsigned int R, const unsigned int N_NODES);
RcppExport SEXP _mixedGraph_theta_to_edgesPar(SEXP THETASEXP, SEXP NODES_TYPESEXP, SEXP CUMSUM_NODES_TYPESEXP, SEXP PSEXP, SEXP RSEXP, SEXP N_NODESSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type THETA(THETASEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type NODES_TYPE(NODES_TYPESEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type CUMSUM_NODES_TYPE(CUMSUM_NODES_TYPESEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type P(PSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type R(RSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type N_NODES(N_NODESSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_to_edgesPar(THETA, NODES_TYPE, CUMSUM_NODES_TYPE, P, R, N_NODES));
    return rcpp_result_gen;
END_RCPP
}
// theta_to_edgesParSparse
const Eigen::SparseMatrix<double> theta_to_edgesParSparse(const Eigen::VectorXd& theta, const std::vector<unsigned int>& nodes_type, const std::vector<unsigned int>& cumsum_nodes_type, const unsigned int p, const unsigned int r, const unsigned int n_nodes);
RcppExport SEXP _mixedGraph_theta_to_edgesParSparse(SEXP thetaSEXP, SEXP nodes_typeSEXP, SEXP cumsum_nodes_typeSEXP, SEXP pSEXP, SEXP rSEXP, SEXP n_nodesSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int>& >::type cumsum_nodes_type(cumsum_nodes_typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type r(rSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_nodes(n_nodesSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_to_edgesParSparse(theta, nodes_type, cumsum_nodes_type, p, r, n_nodes));
    return rcpp_result_gen;
END_RCPP
}
// theta_to_nodesPar
const Eigen::VectorXd theta_to_nodesPar(const Eigen::VectorXd& theta, const std::vector<unsigned int> nodes_type, const unsigned int p);
RcppExport SEXP _mixedGraph_theta_to_nodesPar(SEXP thetaSEXP, SEXP nodes_typeSEXP, SEXP pSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::VectorXd& >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< const std::vector<unsigned int> >::type nodes_type(nodes_typeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type p(pSEXP);
    rcpp_result_gen = Rcpp::wrap(theta_to_nodesPar(theta, nodes_type, p));
    return rcpp_result_gen;
END_RCPP
}
// compute_scale
double compute_scale(const unsigned int sampling_scheme, const unsigned int n, const unsigned int n_nodes, const double prob, const unsigned int m, const unsigned int batch);
RcppExport SEXP _mixedGraph_compute_scale(SEXP sampling_schemeSEXP, SEXP nSEXP, SEXP n_nodesSEXP, SEXP probSEXP, SEXP mSEXP, SEXP batchSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const unsigned int >::type sampling_scheme(sampling_schemeSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n(nSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type n_nodes(n_nodesSEXP);
    Rcpp::traits::input_parameter< const double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type m(mSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type batch(batchSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_scale(sampling_scheme, n, n_nodes, prob, m, batch));
    return rcpp_result_gen;
END_RCPP
}
// rmultinom_wrapper
Rcpp::NumericMatrix rmultinom_wrapper(const double prob, const unsigned int classes, const unsigned int batch, const unsigned int K);
RcppExport SEXP _mixedGraph_rmultinom_wrapper(SEXP probSEXP, SEXP classesSEXP, SEXP batchSEXP, SEXP KSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const double >::type prob(probSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type classes(classesSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type batch(batchSEXP);
    Rcpp::traits::input_parameter< const unsigned int >::type K(KSEXP);
    rcpp_result_gen = Rcpp::wrap(rmultinom_wrapper(prob, classes, batch, K));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_mixedGraph_eta_categorical_node", (DL_FUNC) &_mixedGraph_eta_categorical_node, 8},
    {"_mixedGraph_logp_categorical_node", (DL_FUNC) &_mixedGraph_logp_categorical_node, 7},
    {"_mixedGraph_gradient_categorical_node", (DL_FUNC) &_mixedGraph_gradient_categorical_node, 8},
    {"_mixedGraph_gradientV2_categorical_node", (DL_FUNC) &_mixedGraph_gradientV2_categorical_node, 8},
    {"_mixedGraph_dHess_categorical_node", (DL_FUNC) &_mixedGraph_dHess_categorical_node, 8},
    {"_mixedGraph_E_continuous_node", (DL_FUNC) &_mixedGraph_E_continuous_node, 8},
    {"_mixedGraph_logp_continuous_node", (DL_FUNC) &_mixedGraph_logp_continuous_node, 3},
    {"_mixedGraph_gradient_continuous_node", (DL_FUNC) &_mixedGraph_gradient_continuous_node, 10},
    {"_mixedGraph_dHess_continuous_node", (DL_FUNC) &_mixedGraph_dHess_continuous_node, 10},
    {"_mixedGraph_graph_cl", (DL_FUNC) &_mixedGraph_graph_cl, 6},
    {"_mixedGraph_mixedGraph_old", (DL_FUNC) &_mixedGraph_mixedGraph_old, 17},
    {"_mixedGraph_mixedGraph", (DL_FUNC) &_mixedGraph_mixedGraph, 16},
    {"_mixedGraph_mixedGraph_SVRG", (DL_FUNC) &_mixedGraph_mixedGraph_SVRG, 17},
    {"_mixedGraph_proximal_stepR", (DL_FUNC) &_mixedGraph_proximal_stepR, 10},
    {"_mixedGraph_intMultinom", (DL_FUNC) &_mixedGraph_intMultinom, 3},
    {"_mixedGraph_drawCatNode", (DL_FUNC) &_mixedGraph_drawCatNode, 7},
    {"_mixedGraph_drawContNode", (DL_FUNC) &_mixedGraph_drawContNode, 8},
    {"_mixedGraph_graphGibbsSampler", (DL_FUNC) &_mixedGraph_graphGibbsSampler, 9},
    {"_mixedGraph_cont_gamma", (DL_FUNC) &_mixedGraph_cont_gamma, 7},
    {"_mixedGraph_graphBlocksGibbsSampler", (DL_FUNC) &_mixedGraph_graphBlocksGibbsSampler, 9},
    {"_mixedGraph_theta_to_edgesPar", (DL_FUNC) &_mixedGraph_theta_to_edgesPar, 6},
    {"_mixedGraph_theta_to_edgesParSparse", (DL_FUNC) &_mixedGraph_theta_to_edgesParSparse, 6},
    {"_mixedGraph_theta_to_nodesPar", (DL_FUNC) &_mixedGraph_theta_to_nodesPar, 3},
    {"_mixedGraph_compute_scale", (DL_FUNC) &_mixedGraph_compute_scale, 6},
    {"_mixedGraph_rmultinom_wrapper", (DL_FUNC) &_mixedGraph_rmultinom_wrapper, 4},
    {NULL, NULL, 0}
};

RcppExport void R_init_mixedGraph(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
