expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
rates_tibble %>%
ggplot(aes(x = iter, y = rate))+
geom_line(aes(col = as.factor(meth)))+
facet_nested(nu~recovery+reg_par, scales = 'free')+
theme_light()+
theme(legend.position = 'bottom')
#### Simulation setting ####
sample_size <- c(1000)
nsim <- 1
nus <- c(.01)#200#round(sample_size*c(.01, .1, .25),0)
reg_pars <- c(5, 10, 20)#*sqrt(log(p+q)/(sample_size))#c(1, 2.5, 5, 7.5, 10)
step_sizes <- c(.1)
epss <- c(0.75)
meths <- c(0,1,2)
tol <- 1e-5; counter <- 15; maxiter <- 100
sim_setting <- expand_grid(n = sample_size, sim_id = 1:nsim) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
rates_tibble %>%
ggplot(aes(x = iter, y = rate))+
geom_line(aes(col = as.factor(meth)))+
facet_nested(nu~recovery+reg_par, scales = 'free')+
theme_light()+
theme(legend.position = 'bottom')
#### Simulation setting ####
sample_size <- c(1000)
nsim <- 1
nus <- c(.01)#200#round(sample_size*c(.01, .1, .25),0)
reg_pars <- c(5, 10, 20)#*sqrt(log(p+q)/(sample_size))#c(1, 2.5, 5, 7.5, 10)
step_sizes <- c(1)
epss <- c(0.75)
meths <- c(0,1,2)
tol <- 1e-5; counter <- 15; maxiter <- 100
sim_setting <- expand_grid(n = sample_size, sim_id = 1:nsim) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
rates_tibble %>%
ggplot(aes(x = iter, y = rate))+
geom_line(aes(col = as.factor(meth)))+
facet_nested(nu~recovery+reg_par, scales = 'free')+
theme_light()+
theme(legend.position = 'bottom')
#### Simulation setting ####
sample_size <- c(1000)
nsim <- 1
nus <- c(.01, .1)#200#round(sample_size*c(.01, .1, .25),0)
reg_pars <- c(5, 10, 20)#*sqrt(log(p+q)/(sample_size))#c(1, 2.5, 5, 7.5, 10)
step_sizes <- c(1)
epss <- c(0.75)
meths <- c(0,1,2)
tol <- 1e-5; counter <- 15; maxiter <- 100
sim_setting <- expand_grid(n = sample_size, sim_id = 1:nsim) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
rates_tibble %>%
ggplot(aes(x = iter, y = rate))+
geom_line(aes(col = as.factor(meth)))+
facet_nested(nu~recovery+reg_par, scales = 'free')+
theme_light()+
theme(legend.position = 'bottom')
#### Simulation setting ####
sample_size <- c(1000)
nsim <- 1
nus <- c(.1)#200#round(sample_size*c(.01, .1, .25),0)
reg_pars <- c(5, 10, 20)#*sqrt(log(p+q)/(sample_size))#c(1, 2.5, 5, 7.5, 10)
step_sizes <- c(1)
epss <- c(0.75)
meths <- c(0,1,2)
tol <- 1e-5; counter <- 15; maxiter <- 500
sim_setting <- expand_grid(n = sample_size, sim_id = 1:nsim) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
rates_tibble %>%
ggplot(aes(x = iter, y = rate))+
geom_line(aes(col = as.factor(meth)))+
facet_nested(nu~recovery+reg_par, scales = 'free')+
theme_light()+
theme(legend.position = 'bottom')
#### Simulation setting ####
sample_size <- c(1000)
nsim <- 1
nus <- c(.01, .1)#200#round(sample_size*c(.01, .1, .25),0)
reg_pars <- c(5, 10, 20)#*sqrt(log(p+q)/(sample_size))#c(1, 2.5, 5, 7.5, 10)
step_sizes <- c(1)
epss <- c(0.75)
meths <- c(1,2)
tol <- 1e-5; counter <- 15; maxiter <- 500
sim_setting <- expand_grid(n = sample_size, sim_id = 1:nsim) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
rates_tibble %>%
ggplot(aes(x = iter, y = rate))+
geom_line(aes(col = as.factor(meth)))+
facet_nested(nu~recovery+reg_par, scales = 'free')+
theme_light()+
theme(legend.position = 'bottom')
#### Simulation setting ####
sample_size <- c(2000)
nsim <- 1
nus <- c(.01, .1)#200#round(sample_size*c(.01, .1, .25),0)
reg_pars <- c(5, 10, 20)#*sqrt(log(p+q)/(sample_size))#c(1, 2.5, 5, 7.5, 10)
step_sizes <- c(1)
epss <- c(0.75)
meths <- c(1,2)
tol <- 1e-5; counter <- 15; maxiter <- 500
sim_setting <- expand_grid(n = sample_size, sim_id = 1:nsim) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
rates_tibble %>%
ggplot(aes(x = iter, y = rate))+
geom_line(aes(col = as.factor(meth)))+
facet_nested(nu~recovery+reg_par, scales = 'free')+
theme_light()+
theme(legend.position = 'bottom')
#### Set-up nodes ####
nodes_type <- c(rep(1, 20), rep(2,20))
nodes_type <- sort(nodes_type)
cumsum_nodes_type <- cumsum(nodes_type)
n_nodes <- length(nodes_type)
p <- sum(nodes_type==1)
q <- length(nodes_type)-p
r <- sum(nodes_type)
dim_edges_vec <- r^2-r*(r-1)/2 - sum(sapply(nodes_type, function(x) if_else(x>1, x*(x-1)/2, 0)))
#### Set up graph structure ####
#### alphas (continuous): enters in conditional mean of continuous sub-graph
alphas <- rep(0, p)
#### betas (continuous-continuous): inverse covariance matrix of continuous conditional sub-graph
#### automatic
EMat <- matrix(0, r, r)
#continuous
for (j in 1:p) {
EMat <- setUp_edge(NODE_I = j, NODE_J = j, VAL = 1, EMat)
}
#continuous - continuous
for (j in 1:p) {
for (i in j:p) {
if(abs(j-i)==1){
EMat <- setUp_edge(NODE_I = i, NODE_J = j, VAL = .25, EMat)
}
}
}
#continuous - categorical
for (j in 1:p) {
for (i in (p+1):(p+q)) {
if(abs(j-i)==p){
EMat <- setUp_edge(NODE_I = i, NODE_J = j, VAL = rep(c(.25,-.25),2), EMat)
# EMat <- setUp_edge(NODE_I = i, NODE_J = j, VAL = rep(c(.25,-.25),1), EMat)
}
}
}
#categorical - categorical
for (j in (p+1):(p+q)) {
for (i in j:(p+q)) {
if(abs(j-i)==1){
EMat <- setUp_edge(NODE_I = i, NODE_J = j, VAL = rep(c(1,-1,1,-1,       -1,1,-1,1),2), EMat)
# EMat <- setUp_edge(NODE_I = i, NODE_J = j, VAL = rep(c(.5,-.5,-.5,.5),1), EMat)
}
}
}
Matrix::Matrix(EMat, sparse = T)
edgeMat <- EMat
Matrix::Matrix(edgeMat, sparse = T)
#### Parameter vector ####
# constraint matrix
constrMat <- matrix(0, r, r)
for (node_j in 1:n_nodes) {
for (node_i in node_j:n_nodes) {
constrMat <- setUp_edge(node_i, node_j, VAL = 1, constrMat)
}
}
# true parameter vector
true_theta <- alphas
for (j in 1:r) {
for (i in j:r) {
if(constrMat[i,j] == 1){
true_theta <- c(true_theta, edgeMat[i,j])
}
}
}
# initial parameter vector
contCov_init <- matrix(0, p, p); diag(contCov_init) <- 1
edgeMat_init <- theta_to_edgesPar(c(alphas, rep(0, dim_edges_vec)), nodes_type, cumsum_nodes_type, p, r, n_nodes)
invContCov_init <- solve(contCov_init); invContCov_init[upper.tri(invContCov_init)] <- 0
edgeMat_init[1:p, 1:p] <- invContCov_init
# true parameter vector
theta_init <- rep(0, p)
for (j in 1:r) {
for (i in j:r) {
if(constrMat[i,j] == 1){
theta_init <- c(theta_init, edgeMat_init[i,j])
}
}
}
#### Sampling chains ####
maxiter <- 10000; m <- 5; skip <- 0
set.seed(1)
graphGibbs <- graphBlocksGibbsSampler(
edgesPar = edgeMat,
nodesPar = alphas,
nodes_type = nodes_type,
warmup = 10000,
maxiter = maxiter,
m = m,
skip = skip,
verboseFLAG = F,
store_warmupFLAG = F
)
#### Custom estimating function ####
learn_graph <- function(SEED_, N_, NUp_, STEPSIZE_, REG_PAR_, EPS_, METHOD_){
set.seed(SEED_)
data_ <- reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), N_, replace = F),]
if(METHOD_==0) {maxit_ <- 25}else{maxit_ <- maxiter}
mod <- mixedGraph(
DATA = as.matrix(data_),
SDS = fun_sd(data_, P=p, Q=q), #rep(1, p+q),#
THETA = theta_init,
NODES_TYPE = nodes_type,
MAXITER = maxit_,
STEPSIZE = STEPSIZE_,#step,
SAMPLING_SCHEME = METHOD_,
REG_PAR = REG_PAR_*sqrt(log(p+q)/(N_)),
NU = NUp_*N_,
TOL = 1e-10,
TOL_MINCOUNT = maxit_,
VERBOSEFLAG = F,
EPS = EPS_,
SEED = SEED_
)
return(mod)
}
#### Simulation setting ####
sample_size <- c(100)
nsim <- 1
nus <- c(.01, .1)#200#round(sample_size*c(.01, .1, .25),0)
reg_pars <- c(5, 10, 20)#*sqrt(log(p+q)/(sample_size))#c(1, 2.5, 5, 7.5, 10)
step_sizes <- c(1)
epss <- c(0.75)
meths <- c(0, 1,2)
tol <- 1e-5; counter <- 15; maxiter <- 500
sim_setting <- expand_grid(n = sample_size, sim_id = 1:nsim) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
rates_tibble %>%
ggplot(aes(x = iter, y = rate))+
geom_line(aes(col = as.factor(meth)))+
facet_nested(nu~recovery+reg_par, scales = 'free')+
theme_light()+
theme(legend.position = 'bottom')
#### Simulation setting ####
sample_size <- c(100)
nsim <- 1
nus <- c(.01, .1)#200#round(sample_size*c(.01, .1, .25),0)
reg_pars <- c(5, 10, 20)#*sqrt(log(p+q)/(sample_size))#c(1, 2.5, 5, 7.5, 10)
step_sizes <- c(1)
epss <- c(0.75)
meths <- c(0, 1,2)
tol <- 1e-5; counter <- 15; maxiter <- 1000
sim_setting <- expand_grid(n = sample_size, sim_id = 1:nsim) %>%
mutate(id = row_number()) %>%
select(id, everything()) %>%
expand_grid(nu = nus, reg_par = reg_pars, step_size = step_sizes, eps = epss, meth = meths)
# mutate(
#     data = map(n, ~reduce(graphGibbs$chains, rbind)[sample(1:nrow(graphGibbs$chains[[1]]), .x, replace = F),])
# )
sim_setting
plan(multisession, workers = 4)
#plan(sequential)
tictoc::tic()
sim_setting <- sim_setting %>%
mutate( mod = future_pmap(list(sim_id, n, nu, step_size, reg_par, eps, meth), function(sim_id_, n_, nu_, step_size_, reg_par_, eps_, meth_){
learn_graph(SEED_ = sim_id_, N_ = n_, NUp_ = nu_, STEPSIZE_ = step_size_, REG_PAR_= reg_par_, EPS_ = eps_, METHOD_ = meth_)
}, .options = furrr_options(seed = T), .progress = T )
)
tictoc::toc()
rates_tibble <- sim_setting %>%
mutate(
theta_path = map(mod, ~tibble(iter = 0:(nrow(.x$path_theta)-1), theta = as.list(data.frame(t(.x$path_theta)))) %>% filter(iter<nrow(.x$path_theta)-1))
) %>%
unnest(theta_path) %>%
mutate(
rates_tib = map(theta, ~tidy_recovery(
edgeMat,
theta_to_edgesPar(.x, nodes_type, cumsum_nodes_type, p, r, n_nodes),
P = p, Q = q)$rates)
) %>%
unnest(rates_tib)%>%
gather(key = 'recovery', value = 'rate', tp, tn, tt)
rates_tibble
